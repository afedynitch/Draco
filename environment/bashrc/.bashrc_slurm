#!/bin/bash
##-*- Mode: bash -*-
##---------------------------------------------------------------------------##
## File  : environment/bashrc/.bashrc_slurm
## Date  : Wednesday, Oct 11, 2017, 15:15 pm
## Author: Kelly Thompson
## Note  : Copyright (C) 2017, Los Alamos National Security, LLC.
##         All rights are reserved.
##
##  Bash configuration file to aid slurm use.
##---------------------------------------------------------------------------##


##---------------------------------------------------------------------------##
## ENVIRONMENTS for interactive sessions
##---------------------------------------------------------------------------##

# If this is an interactive shell then the environment variable $-
# should contain an "i":
case ${-} in
*i*)
   export INTERACTIVE=true
   if test -n "${verbose}"; then
      echo "in draco/environment/bashrc/.bashrc_slurm"
   fi

   # Slurm related:
   # See http://hpcfaq.lanl.gov/faqs/view/58
   function slurmhelp() {
     echo -e "\nAliases for extracting information from slurm"
     echo -e "\nMy jobs/account: \n"
     echo "showuser [moniker] - Print available accounts, partitions, qos, and fairshare info."
     echo "drmgroups          - Print available accounts."
     echo "sqshowme           - Show my jobs (running, pending, blocked)."
     echo "checkjob [job-id]  - Print information about the specified job-id."
     echo "sreason [job-id]   - Print why job-id is not starting."
     echo "myjobpriorities    - List of all jobs and their priorities."
     echo -e "\nAll jobs:\n"
     echo "sq        - Show all jobs for all users (running, pending, blocked)."
     echo "sqrun     - Show running jobs for all users"
     echo "sqpend    - Show pending jobs for all users"
     echo "pend      - Same as sqpend, but with alternate format"
     echo "sqother   - Show blocked jobs for all users."
     echo "sqqos [qos-name] - Show jobs with provided qos (default 'dev')"
     echo -e "\nOther information:\n"
     echo "idle           - Show idle processors and nodes".
     echo "knownqos       - Table of  qos relative priorities."
     echo "knownaccounts  - Table of known accounts."
     echo "jobpriorities  - List of all jobs and their priorities."
     echo "backfill       - Maximum job size to allow immediate start?"
}

   alias hluser="egrep --color -E '.*${USER}.*|$'"
   boldface=$(tput bold)
   normalface=$(tput sgr0)

   alias sqrun='squeue -o "%.7i %.10u %.10a %.8q %.9P %.12j %.6D %.6C %.12L %S" -S "L" -t R | hluser'
   alias sqpend='squeue -o "%.7i %.8Q %.10u %.10a %.8q %.9P %.12j %.6C %.16S %.10L %.r" -t PD --sort=S,-p | grep -v "N/A" | hluser; squeue -o "%.7i %.8Q %.10u %.10a %.8q %.9P %.12j %.6C %.16S %.10L %.r" -t PD --sort=S,-p | grep --color=never "N/A" | hluser'
   alias sqother='squeue -o "%.7i %.10u %.12T %.6C %10l %R" -S "-T" -t S,CG,CD,CF,CA,F,TO,PR,NF | hluser'
   alias sq='(echo -e "\n${boldface}RUNNING${normalface}":;sqrun;echo -e "\n${boldface}PENDING:${normalface}";sqpend;echo -e "\n${boldface}OTHER:${normalface}";sqother;echo " ")'
   alias sqshowme='squeue -u ${USER} -o "%.7i %.10u %.8T %.6D %.6C %.12L %S" -S "-t,-L"'
   alias showme='sqshowme'
   alias sqall='squeue -o "%.7i %.10u %.8T %.6C %.12L %S" -S "-t,-L"'
   alias pend='squeue -O "jobid:.7,prioritylong:.10,username:.10,account:.16,qos:.12,partition:.14,numnodes:.7,timelimit:.14,starttime:.22,reason:.20" -t PD'
   # sinfo:
   # %P - Partition name followed by "*" for the default partition
   # %t - state of nodes, compact form
   # %F - Number of nodes by state in the form allocated/idle/other/total
   alias idle='sinfo -l | egrep "(idle|PARTITION)"; echo " "; sinfo -o "%P %t %F" -p standard -t idle; echo "(A)llocated, (I)dle, (O)ther, (T)otal"'
   alias knownqos='sacctmgr show qos format=name,priority'
   alias knownaccounts='sacctmgr show account format=account%20,description'
   alias backfill='squeue --start -o "%18S %.18i %.9P %.8j %.iu %.2t %10M %.6D %R" | egrep "(Resources|START)"'
   function jobpriorities() {
     local formatstring="%15i %8u %.10Y %.10y %.10A %.10a %.10F %.10f %.10J %.10j %.10P %.10p %.10Q %.10q %.6N %20T %t"
     sprio -u $USER -o "$formatstring" | head -n 1
     sprio -h -n -o "$formatstring" $* | sort -r -k 3,3
   }
   alias myjobpriorities='jobpriorities -u $USER'
   function sqqos() {
     local myqos="dev"
     if [ $1 ]; then myqos=$1; fi
     squeue --qos=$myqos -o "%.7i %.10u %.8T %.6D %.6C %.12L %S" -S "-t,-L"
   }
   # checkjob analogs
   function checkjob() {
     job=$1
     verbose=$2
     if [ "$job" == "" ]; then
       echo No JobID Specified
     else
       if [[ $verbose == "-vv" ]]; then
         scontrol -dd show job $job
       elif [[ $verbose == "-v" ]]; then
         scontrol -d show job $job
       else
         scontrol show job $job
       fi
       # sprio -n -u $USER -j $job -o "%15i %.8u %.10Y %.10A %.10F %.10f %.10J %.10P %.10Q"
     fi
   }
   alias chk='checkjob'
   # Show me all the possible qos and accounts
   function showuser () {
     user=$1
     if [ "$user" == "" ]; then user=${USER}; fi
     # sacct -u $user --format=JobID,Priority%10,JobName%20,Account,QOS,Partition,Start,Elapsed,State
     echo -e "\nAccounts, partitions and qos:\n"
     sacctmgr list assoc user=kellyt format=Cluster,Account,Partition,QOS%40
     accounts=`sacctmgr -n  list assoc user=kellyt format=Account | uniq`
     echo -e "\nFairshare evaluation:\n"
     for a in $accounts; do
       sshare -m -a -A $a -u $user
     done
     echo -e "\nPriority for pending jobs:\n"
     sprio -n -u $user -o "%15i %.8u %.10Y %.10A %.10F %.10f %.10J %.10P %.10Q"
     echo -e "\n24-hour usage report:\n"
     sreport -t percent cluster UserUtilizationByAccount Users=$user
   }
   alias suser='showuser'
   function drmgroups () {
     user=$1
     if [ "$user" == "" ]; then
       user=${USER}
     fi
     sshare -m -u $user | grep $user | cut -f3 -d" " | uniq | sed '/^\s*$/d' | paste -d, -s
   }
   function sreason () {
     squeue -o "%.7i %.10u %.10T %r" -t PD,S,CG,CD,CF,CA,F,TO,PR,NF -j $1
   }

   ;; # end case 'interactive'

##---------------------------------------------------------------------------##
## ENVIRONMENTS for non interactive sessions
##---------------------------------------------------------------------------##

*) # Not an interactive shell (e.g. A PBS shell?)
   export INTERACTIVE=false
   ;;
esac

##---------------------------------------------------------------------------##
## end of .bashrc_slurm
##---------------------------------------------------------------------------##
